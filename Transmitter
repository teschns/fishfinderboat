import time
import board
import busio
import digitalio
import adafruit_rfm69
import adafruit_nunchuk

# --- Radio Setup ---
RADIO_FREQ_MHZ = 915.0
CS = digitalio.DigitalInOut(board.RFM_CS)
RESET = digitalio.DigitalInOut(board.RFM_RST)
CS.switch_to_output()
RESET.switch_to_output()
spi = busio.SPI(board.SCK, board.MOSI, board.MISO)
rfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)
rfm69.tx_power = 13
print("RFM69 transmitter ready")

# --- Nunchuk Setup ---
i2c = board.I2C()
nc = adafruit_nunchuk.Nunchuk(i2c)

# --- Mode Handling ---
mode = 0  # 0=Manual, 1=Heading Hold, 2=GPS (future)
mode_names = ["Manual", "Heading Hold", "GPS"]

# --- Heading Hold Variables ---
desired_heading = 0.0
HEADING_RATE = 0.1  # degrees per joystick unit per loop

# --- Debounce buttons ---
prev_c = False
prev_z = False

while True:
    # Read joystick & buttons
    joystick_x, joystick_y = nc.joystick
    button_c = nc.buttons.C
    button_z = nc.buttons.Z

    # Normalize joystick values to 0-255 range
    j_x = min(max(int((joystick_x - 32) * 255 / (231 - 32)), 0), 255)
    j_y = min(max(int((joystick_y - 32) * 255 / (231 - 32)), 0), 255)

    # Mode switching (only when both buttons pressed together)
    if button_c and button_z and not (prev_c and prev_z):
        mode = (mode + 1) % 3
        print("MODE SWITCHED:", mode_names[mode])
        time.sleep(0.3)  # debounce delay

    prev_c = button_c
    prev_z = button_z

    if mode == 0:  # Manual mode
        message = f"{mode},{j_y},{j_x},0"
        print(f"Manual: Y={j_y} X={j_x}")

    elif mode == 1:  # Heading Hold mode
        # Use Y for throttle, X for heading adjustment
        throttle = j_y

        # Adjust desired heading by joystick X
        heading_delta = (j_x - 128) * HEADING_RATE
        desired_heading += heading_delta
        desired_heading %= 360  # wrap 0-360

        message = f"{mode},{throttle},0,{int(desired_heading)}"
        print(f"Heading Hold: Throttle={throttle} Heading={int(desired_heading)}")

    elif mode == 2:  # GPS mode reserved
        message = f"{mode},0,0,0"
        print("GPS Mode (not implemented)")

    # Send message via RFM69
    rfm69.send(bytes(message, "utf-8"))
    time.sleep(0.05)
